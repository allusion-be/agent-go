// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
module T {
    public type Cycles = Nat;
    public type BlockIndex = Nat64;
    public type LogVisibility = { #controllers; #public };
    public type CanisterSettings = { controller : ?Principal; controllers : ?[Principal]; compute_allocation : ?Nat; memory_allocation : ?Nat; freezing_threshold : ?Nat; reserved_cycles_limit : ?Nat; log_visibility : ?T.LogVisibility; wasm_memory_limit : ?Nat };
    public type Subaccount = ?Blob;
    public type Memo = ?Blob;
    public type NotifyTopUpArg = { block_index : T.BlockIndex; canister_id : Principal };
    public type SubnetSelection = { #Subnet : { subnet : Principal }; #Filter : T.SubnetFilter };
    public type SubnetFilter = { subnet_type : ?Text };
    public type CreateCanisterArg = { settings : ?T.CanisterSettings; subnet_type : ?Text; subnet_selection : ?T.SubnetSelection };
    public type NotifyCreateCanisterArg = { block_index : T.BlockIndex; controller : Principal; subnet_type : ?Text; subnet_selection : ?T.SubnetSelection; settings : ?T.CanisterSettings };
    public type CreateCanisterError = { #Refunded : { refund_amount : Nat; create_error : Text }; #RefundFailed : { create_error : Text; refund_error : Text } };
    public type NotifyError = { #Refunded : { reason : Text; block_index : ?T.BlockIndex }; #Processing; #TransactionTooOld : T.BlockIndex; #InvalidTransaction : Text; #Other : { error_code : Nat64; error_message : Text } };
    public type NotifyTopUpResult = { #Ok : T.Cycles; #Err : T.NotifyError };
    public type CreateCanisterResult = { #Ok : Principal; #Err : T.CreateCanisterError };
    public type NotifyCreateCanisterResult = { #Ok : Principal; #Err : T.NotifyError };
    public type IcpXdrConversionRate = { timestamp_seconds : Nat64; xdr_permyriad_per_icp : Nat64 };
    public type IcpXdrConversionRateResponse = { data : T.IcpXdrConversionRate; hash_tree : Blob; certificate : Blob };
    public type SubnetTypesToSubnetsResponse = { data : [(Text, [Principal])] };
    public type PrincipalsAuthorizedToCreateCanistersToSubnetsResponse = { data : [(Principal, [Principal])] };
    public type AccountIdentifier = Text;
    public type ExchangeRateCanister = { #Set : Principal; #Unset };
    public type CyclesCanisterInitPayload = { ledger_canister_id : ?Principal; governance_canister_id : ?Principal; minting_account_id : ?T.AccountIdentifier; last_purged_notification : ?Nat64; exchange_rate_canister : ?T.ExchangeRateCanister; cycles_ledger_canister_id : ?Principal };
    public type NotifyMintCyclesArg = { block_index : T.BlockIndex; to_subaccount : T.Subaccount; deposit_memo : T.Memo };
    public type NotifyMintCyclesResult = { #Ok : T.NotifyMintCyclesSuccess; #Err : T.NotifyError };
    public type NotifyMintCyclesSuccess = { block_index : Nat; minted : Nat; balance : Nat };
};
