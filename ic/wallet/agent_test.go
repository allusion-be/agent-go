// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
package wallet_test

import (
	"github.com/aviate-labs/agent-go"
	"github.com/aviate-labs/agent-go/candid/idl"
	"github.com/aviate-labs/agent-go/mock"
	"github.com/aviate-labs/agent-go/principal"
	"net/http/httptest"
	"net/url"
	"testing"

	"github.com/aviate-labs/agent-go/ic/wallet"
)

// Test_AddAddress tests the "add_address" method on the "wallet" canister.
func Test_AddAddress(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "add_address",
			Arguments: []any{new(wallet.AddressEntry)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = wallet.AddressEntry{
		*new(principal.Principal),
		*new(*string),
		wallet.Kind{
			Unknown: new(idl.Null),
		},
		wallet.Role{
			Contact: new(idl.Null),
		},
	}
	if err := a.AddAddress(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_AddController tests the "add_controller" method on the "wallet" canister.
func Test_AddController(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "add_controller",
			Arguments: []any{new(principal.Principal)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = *new(principal.Principal)
	if err := a.AddController(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_Authorize tests the "authorize" method on the "wallet" canister.
func Test_Authorize(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "authorize",
			Arguments: []any{new(principal.Principal)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = *new(principal.Principal)
	if err := a.Authorize(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_Deauthorize tests the "deauthorize" method on the "wallet" canister.
func Test_Deauthorize(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "deauthorize",
			Arguments: []any{new(principal.Principal)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{wallet.WalletResult{
					Ok: new(idl.Null),
				}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = *new(principal.Principal)
	if _, err := a.Deauthorize(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_GetChart tests the "get_chart" method on the "wallet" canister.
func Test_GetChart(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name: "get_chart",
			Arguments: []any{new(*struct {
				Count     *uint32 `ic:"count,omitempty" json:"count,omitempty"`
				Precision *uint64 `ic:"precision,omitempty" json:"precision,omitempty"`
			})},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{[]struct {
					Field0 uint64 `ic:"0" json:"0"`
					Field1 uint64 `ic:"1" json:"1"`
				}{

					{
						*new(uint64),
						*new(uint64),
					}}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = *new(*struct {
		Count     *uint32 `ic:"count,omitempty" json:"count,omitempty"`
		Precision *uint64 `ic:"precision,omitempty" json:"precision,omitempty"`
	})
	if _, err := a.GetChart(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_GetControllers tests the "get_controllers" method on the "wallet" canister.
func Test_GetControllers(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "get_controllers",
			Arguments: []any{},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{[]principal.Principal{*new(principal.Principal)}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	if _, err := a.GetControllers(); err != nil {
		t.Fatal(err)
	}

}

// Test_GetCustodians tests the "get_custodians" method on the "wallet" canister.
func Test_GetCustodians(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "get_custodians",
			Arguments: []any{},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{[]principal.Principal{*new(principal.Principal)}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	if _, err := a.GetCustodians(); err != nil {
		t.Fatal(err)
	}

}

// Test_GetEvents tests the "get_events" method on the "wallet" canister.
func Test_GetEvents(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name: "get_events",
			Arguments: []any{new(*struct {
				From *uint32 `ic:"from,omitempty" json:"from,omitempty"`
				To   *uint32 `ic:"to,omitempty" json:"to,omitempty"`
			})},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{[]wallet.Event{{
					*new(uint32),
					*new(uint64),
					wallet.EventKind{
						CyclesSent: idl.Ptr(struct {
							To     principal.Principal `ic:"to" json:"to"`
							Amount uint64              `ic:"amount" json:"amount"`
							Refund uint64              `ic:"refund" json:"refund"`
						}{
							*new(principal.Principal),
							*new(uint64),
							*new(uint64),
						}),
					},
				}}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = *new(*struct {
		From *uint32 `ic:"from,omitempty" json:"from,omitempty"`
		To   *uint32 `ic:"to,omitempty" json:"to,omitempty"`
	})
	if _, err := a.GetEvents(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_GetEvents128 tests the "get_events128" method on the "wallet" canister.
func Test_GetEvents128(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name: "get_events128",
			Arguments: []any{new(*struct {
				From *uint32 `ic:"from,omitempty" json:"from,omitempty"`
				To   *uint32 `ic:"to,omitempty" json:"to,omitempty"`
			})},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{[]wallet.Event128{{
					*new(uint32),
					*new(uint64),
					wallet.EventKind128{
						CyclesSent: idl.Ptr(struct {
							To     principal.Principal `ic:"to" json:"to"`
							Amount idl.Nat             `ic:"amount" json:"amount"`
							Refund idl.Nat             `ic:"refund" json:"refund"`
						}{
							*new(principal.Principal),
							idl.NewNat(uint(0)),
							idl.NewNat(uint(0)),
						}),
					},
				}}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = *new(*struct {
		From *uint32 `ic:"from,omitempty" json:"from,omitempty"`
		To   *uint32 `ic:"to,omitempty" json:"to,omitempty"`
	})
	if _, err := a.GetEvents128(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_GetManagedCanisterEvents tests the "get_managed_canister_events" method on the "wallet" canister.
func Test_GetManagedCanisterEvents(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name: "get_managed_canister_events",
			Arguments: []any{new(struct {
				Canister principal.Principal `ic:"canister" json:"canister"`
				From     *uint32             `ic:"from,omitempty" json:"from,omitempty"`
				To       *uint32             `ic:"to,omitempty" json:"to,omitempty"`
			})},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{*new(*[]wallet.ManagedCanisterEvent)}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = struct {
		Canister principal.Principal `ic:"canister" json:"canister"`
		From     *uint32             `ic:"from,omitempty" json:"from,omitempty"`
		To       *uint32             `ic:"to,omitempty" json:"to,omitempty"`
	}{
		*new(principal.Principal),
		*new(*uint32),
		*new(*uint32),
	}
	if _, err := a.GetManagedCanisterEvents(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_GetManagedCanisterEvents128 tests the "get_managed_canister_events128" method on the "wallet" canister.
func Test_GetManagedCanisterEvents128(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name: "get_managed_canister_events128",
			Arguments: []any{new(struct {
				Canister principal.Principal `ic:"canister" json:"canister"`
				From     *uint32             `ic:"from,omitempty" json:"from,omitempty"`
				To       *uint32             `ic:"to,omitempty" json:"to,omitempty"`
			})},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{*new(*[]wallet.ManagedCanisterEvent128)}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = struct {
		Canister principal.Principal `ic:"canister" json:"canister"`
		From     *uint32             `ic:"from,omitempty" json:"from,omitempty"`
		To       *uint32             `ic:"to,omitempty" json:"to,omitempty"`
	}{
		*new(principal.Principal),
		*new(*uint32),
		*new(*uint32),
	}
	if _, err := a.GetManagedCanisterEvents128(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_HttpRequest tests the "http_request" method on the "wallet" canister.
func Test_HttpRequest(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "http_request",
			Arguments: []any{new(wallet.HttpRequest)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{wallet.HttpResponse{
					*new(uint16),
					[]wallet.HeaderField{{
						*new(string),
						*new(string),
					}},
					*new([]byte),
					*new(*wallet.StreamingStrategy),
				}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = wallet.HttpRequest{
		*new(string),
		*new(string),
		[]wallet.HeaderField{{
			*new(string),
			*new(string),
		}},
		*new([]byte),
	}
	if _, err := a.HttpRequest(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_ListAddresses tests the "list_addresses" method on the "wallet" canister.
func Test_ListAddresses(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "list_addresses",
			Arguments: []any{},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{[]wallet.AddressEntry{{
					*new(principal.Principal),
					*new(*string),
					wallet.Kind{
						Unknown: new(idl.Null),
					},
					wallet.Role{
						Contact: new(idl.Null),
					},
				}}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	if _, err := a.ListAddresses(); err != nil {
		t.Fatal(err)
	}

}

// Test_ListManagedCanisters tests the "list_managed_canisters" method on the "wallet" canister.
func Test_ListManagedCanisters(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name: "list_managed_canisters",
			Arguments: []any{new(struct {
				From *uint32 `ic:"from,omitempty" json:"from,omitempty"`
				To   *uint32 `ic:"to,omitempty" json:"to,omitempty"`
			})},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{[]wallet.ManagedCanisterInfo{{
					*new(principal.Principal),
					*new(*string),
					*new(uint64),
				}}, *new(uint32)}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = struct {
		From *uint32 `ic:"from,omitempty" json:"from,omitempty"`
		To   *uint32 `ic:"to,omitempty" json:"to,omitempty"`
	}{
		*new(*uint32),
		*new(*uint32),
	}
	if _, _, err := a.ListManagedCanisters(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_Name tests the "name" method on the "wallet" canister.
func Test_Name(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "name",
			Arguments: []any{},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{*new(*string)}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	if _, err := a.Name(); err != nil {
		t.Fatal(err)
	}

}

// Test_RemoveAddress tests the "remove_address" method on the "wallet" canister.
func Test_RemoveAddress(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "remove_address",
			Arguments: []any{new(principal.Principal)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{wallet.WalletResult{
					Ok: new(idl.Null),
				}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = *new(principal.Principal)
	if _, err := a.RemoveAddress(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_RemoveController tests the "remove_controller" method on the "wallet" canister.
func Test_RemoveController(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "remove_controller",
			Arguments: []any{new(principal.Principal)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{wallet.WalletResult{
					Ok: new(idl.Null),
				}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = *new(principal.Principal)
	if _, err := a.RemoveController(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_SetName tests the "set_name" method on the "wallet" canister.
func Test_SetName(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "set_name",
			Arguments: []any{new(string)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = *new(string)
	if err := a.SetName(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_SetShortName tests the "set_short_name" method on the "wallet" canister.
func Test_SetShortName(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "set_short_name",
			Arguments: []any{new(principal.Principal), new(*string)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{*new(*wallet.ManagedCanisterInfo)}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = *new(principal.Principal)
	var a1 = *new(*string)
	if _, err := a.SetShortName(a0, a1); err != nil {
		t.Fatal(err)
	}

}

// Test_WalletApiVersion tests the "wallet_api_version" method on the "wallet" canister.
func Test_WalletApiVersion(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "wallet_api_version",
			Arguments: []any{},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{*new(string)}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	if _, err := a.WalletApiVersion(); err != nil {
		t.Fatal(err)
	}

}

// Test_WalletBalance tests the "wallet_balance" method on the "wallet" canister.
func Test_WalletBalance(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "wallet_balance",
			Arguments: []any{},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{struct {
					Amount uint64 `ic:"amount" json:"amount"`
				}{
					*new(uint64),
				}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	if _, err := a.WalletBalance(); err != nil {
		t.Fatal(err)
	}

}

// Test_WalletBalance128 tests the "wallet_balance128" method on the "wallet" canister.
func Test_WalletBalance128(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "wallet_balance128",
			Arguments: []any{},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{struct {
					Amount idl.Nat `ic:"amount" json:"amount"`
				}{
					idl.NewNat(uint(0)),
				}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	if _, err := a.WalletBalance128(); err != nil {
		t.Fatal(err)
	}

}

// Test_WalletCall tests the "wallet_call" method on the "wallet" canister.
func Test_WalletCall(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name: "wallet_call",
			Arguments: []any{new(struct {
				Canister   principal.Principal `ic:"canister" json:"canister"`
				MethodName string              `ic:"method_name" json:"method_name"`
				Args       []byte              `ic:"args" json:"args"`
				Cycles     uint64              `ic:"cycles" json:"cycles"`
			})},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{wallet.WalletResultCall{
					Ok: idl.Ptr(struct {
						Return []byte `ic:"return" json:"return"`
					}{
						*new([]byte),
					}),
				}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = struct {
		Canister   principal.Principal `ic:"canister" json:"canister"`
		MethodName string              `ic:"method_name" json:"method_name"`
		Args       []byte              `ic:"args" json:"args"`
		Cycles     uint64              `ic:"cycles" json:"cycles"`
	}{
		*new(principal.Principal),
		*new(string),
		*new([]byte),
		*new(uint64),
	}
	if _, err := a.WalletCall(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_WalletCall128 tests the "wallet_call128" method on the "wallet" canister.
func Test_WalletCall128(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name: "wallet_call128",
			Arguments: []any{new(struct {
				Canister   principal.Principal `ic:"canister" json:"canister"`
				MethodName string              `ic:"method_name" json:"method_name"`
				Args       []byte              `ic:"args" json:"args"`
				Cycles     idl.Nat             `ic:"cycles" json:"cycles"`
			})},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{wallet.WalletResultCall{
					Ok: idl.Ptr(struct {
						Return []byte `ic:"return" json:"return"`
					}{
						*new([]byte),
					}),
				}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = struct {
		Canister   principal.Principal `ic:"canister" json:"canister"`
		MethodName string              `ic:"method_name" json:"method_name"`
		Args       []byte              `ic:"args" json:"args"`
		Cycles     idl.Nat             `ic:"cycles" json:"cycles"`
	}{
		*new(principal.Principal),
		*new(string),
		*new([]byte),
		idl.NewNat(uint(0)),
	}
	if _, err := a.WalletCall128(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_WalletCallWithMaxCycles tests the "wallet_call_with_max_cycles" method on the "wallet" canister.
func Test_WalletCallWithMaxCycles(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name: "wallet_call_with_max_cycles",
			Arguments: []any{new(struct {
				Canister   principal.Principal `ic:"canister" json:"canister"`
				MethodName string              `ic:"method_name" json:"method_name"`
				Args       []byte              `ic:"args" json:"args"`
			})},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{wallet.WalletResultCallWithMaxCycles{
					Ok: idl.Ptr(struct {
						Return         []byte  `ic:"return" json:"return"`
						AttachedCycles idl.Nat `ic:"attached_cycles" json:"attached_cycles"`
					}{
						*new([]byte),
						idl.NewNat(uint(0)),
					}),
				}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = struct {
		Canister   principal.Principal `ic:"canister" json:"canister"`
		MethodName string              `ic:"method_name" json:"method_name"`
		Args       []byte              `ic:"args" json:"args"`
	}{
		*new(principal.Principal),
		*new(string),
		*new([]byte),
	}
	if _, err := a.WalletCallWithMaxCycles(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_WalletCreateCanister tests the "wallet_create_canister" method on the "wallet" canister.
func Test_WalletCreateCanister(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "wallet_create_canister",
			Arguments: []any{new(wallet.CreateCanisterArgs)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{wallet.WalletResultCreate{
					Ok: idl.Ptr(struct {
						CanisterId principal.Principal `ic:"canister_id" json:"canister_id"`
					}{
						*new(principal.Principal),
					}),
				}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = wallet.CreateCanisterArgs{
		*new(uint64),
		wallet.CanisterSettings{
			*new(*principal.Principal),
			*new(*[]principal.Principal),
			*new(*idl.Nat),
			*new(*idl.Nat),
			*new(*idl.Nat),
		},
	}
	if _, err := a.WalletCreateCanister(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_WalletCreateCanister128 tests the "wallet_create_canister128" method on the "wallet" canister.
func Test_WalletCreateCanister128(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "wallet_create_canister128",
			Arguments: []any{new(wallet.CreateCanisterArgs128)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{wallet.WalletResultCreate{
					Ok: idl.Ptr(struct {
						CanisterId principal.Principal `ic:"canister_id" json:"canister_id"`
					}{
						*new(principal.Principal),
					}),
				}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = wallet.CreateCanisterArgs128{
		idl.NewNat(uint(0)),
		wallet.CanisterSettings{
			*new(*principal.Principal),
			*new(*[]principal.Principal),
			*new(*idl.Nat),
			*new(*idl.Nat),
			*new(*idl.Nat),
		},
	}
	if _, err := a.WalletCreateCanister128(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_WalletCreateWallet tests the "wallet_create_wallet" method on the "wallet" canister.
func Test_WalletCreateWallet(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "wallet_create_wallet",
			Arguments: []any{new(wallet.CreateCanisterArgs)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{wallet.WalletResultCreate{
					Ok: idl.Ptr(struct {
						CanisterId principal.Principal `ic:"canister_id" json:"canister_id"`
					}{
						*new(principal.Principal),
					}),
				}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = wallet.CreateCanisterArgs{
		*new(uint64),
		wallet.CanisterSettings{
			*new(*principal.Principal),
			*new(*[]principal.Principal),
			*new(*idl.Nat),
			*new(*idl.Nat),
			*new(*idl.Nat),
		},
	}
	if _, err := a.WalletCreateWallet(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_WalletCreateWallet128 tests the "wallet_create_wallet128" method on the "wallet" canister.
func Test_WalletCreateWallet128(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "wallet_create_wallet128",
			Arguments: []any{new(wallet.CreateCanisterArgs128)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{wallet.WalletResultCreate{
					Ok: idl.Ptr(struct {
						CanisterId principal.Principal `ic:"canister_id" json:"canister_id"`
					}{
						*new(principal.Principal),
					}),
				}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = wallet.CreateCanisterArgs128{
		idl.NewNat(uint(0)),
		wallet.CanisterSettings{
			*new(*principal.Principal),
			*new(*[]principal.Principal),
			*new(*idl.Nat),
			*new(*idl.Nat),
			*new(*idl.Nat),
		},
	}
	if _, err := a.WalletCreateWallet128(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_WalletReceive tests the "wallet_receive" method on the "wallet" canister.
func Test_WalletReceive(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name:      "wallet_receive",
			Arguments: []any{new(*wallet.ReceiveOptions)},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = *new(*wallet.ReceiveOptions)
	if err := a.WalletReceive(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_WalletSend tests the "wallet_send" method on the "wallet" canister.
func Test_WalletSend(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name: "wallet_send",
			Arguments: []any{new(struct {
				Canister principal.Principal `ic:"canister" json:"canister"`
				Amount   uint64              `ic:"amount" json:"amount"`
			})},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{wallet.WalletResult{
					Ok: new(idl.Null),
				}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = struct {
		Canister principal.Principal `ic:"canister" json:"canister"`
		Amount   uint64              `ic:"amount" json:"amount"`
	}{
		*new(principal.Principal),
		*new(uint64),
	}
	if _, err := a.WalletSend(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_WalletSend128 tests the "wallet_send128" method on the "wallet" canister.
func Test_WalletSend128(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name: "wallet_send128",
			Arguments: []any{new(struct {
				Canister principal.Principal `ic:"canister" json:"canister"`
				Amount   idl.Nat             `ic:"amount" json:"amount"`
			})},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{wallet.WalletResult{
					Ok: new(idl.Null),
				}}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = struct {
		Canister principal.Principal `ic:"canister" json:"canister"`
		Amount   idl.Nat             `ic:"amount" json:"amount"`
	}{
		*new(principal.Principal),
		idl.NewNat(uint(0)),
	}
	if _, err := a.WalletSend128(a0); err != nil {
		t.Fatal(err)
	}

}

// Test_WalletStoreWalletWasm tests the "wallet_store_wallet_wasm" method on the "wallet" canister.
func Test_WalletStoreWalletWasm(t *testing.T) {
	a, err := newAgent([]mock.Method{
		{
			Name: "wallet_store_wallet_wasm",
			Arguments: []any{new(struct {
				WasmModule []byte `ic:"wasm_module" json:"wasm_module"`
			})},
			Handler: func(request mock.Request) ([]any, error) {
				return []any{}, nil
			},
		},
	})
	if err != nil {
		t.Fatal(err)
	}

	var a0 = struct {
		WasmModule []byte `ic:"wasm_module" json:"wasm_module"`
	}{
		*new([]byte),
	}
	if err := a.WalletStoreWalletWasm(a0); err != nil {
		t.Fatal(err)
	}

}

// newAgent creates a new agent with the given (mock) methods.
// Runs a mock replica in the background.
func newAgent(methods []mock.Method) (*wallet.Agent, error) {
	replica := mock.NewReplica()
	canisterId := principal.Principal{Raw: []byte("wallet")}
	replica.AddCanister(canisterId, methods)
	s := httptest.NewServer(replica)
	u, _ := url.Parse(s.URL)
	a, err := wallet.NewAgent(canisterId, agent.Config{
		ClientConfig: &agent.ClientConfig{Host: u},
		FetchRootKey: true,
	})
	if err != nil {
		return nil, err
	}
	return a, nil
}
