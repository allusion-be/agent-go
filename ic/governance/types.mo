// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
module T {
    public type AccountIdentifier = { hash : Blob };
    public type Action = { #RegisterKnownNeuron : T.KnownNeuron; #ManageNeuron : T.ManageNeuron; #CreateServiceNervousSystem : T.CreateServiceNervousSystem; #ExecuteNnsFunction : T.ExecuteNnsFunction; #RewardNodeProvider : T.RewardNodeProvider; #OpenSnsTokenSwap : T.OpenSnsTokenSwap; #SetSnsTokenSwapOpenTimeWindow : T.SetSnsTokenSwapOpenTimeWindow; #SetDefaultFollowees : T.SetDefaultFollowees; #RewardNodeProviders : T.RewardNodeProviders; #ManageNetworkEconomics : T.NetworkEconomics; #ApproveGenesisKyc : T.ApproveGenesisKyc; #AddOrRemoveNodeProvider : T.AddOrRemoveNodeProvider; #Motion : T.Motion };
    public type AddHotKey = { new_hot_key : ?Principal };
    public type AddOrRemoveNodeProvider = { change : ?T.Change };
    public type Amount = { e8s : Nat64 };
    public type ApproveGenesisKyc = { principals : [Principal] };
    public type Ballot = { vote : Int32; voting_power : Nat64 };
    public type BallotInfo = { vote : Int32; proposal_id : ?T.NeuronId };
    public type By = { #NeuronIdOrSubaccount : {  }; #MemoAndController : T.ClaimOrRefreshNeuronFromAccount; #Memo : Nat64 };
    public type Canister = { id : ?Principal };
    public type CanisterStatusResultV2 = { status : ?Int32; freezing_threshold : ?Nat64; controllers : [Principal]; memory_size : ?Nat64; cycles : ?Nat64; idle_cycles_burned_per_day : ?Nat64; module_hash : Blob };
    public type CanisterSummary = { status : ?T.CanisterStatusResultV2; canister_id : ?Principal };
    public type CfNeuron = { has_created_neuron_recipes : ?Bool; nns_neuron_id : Nat64; amount_icp_e8s : Nat64 };
    public type CfParticipant = { hotkey_principal : Text; cf_neurons : [T.CfNeuron] };
    public type Change = { #ToRemove : T.NodeProvider; #ToAdd : T.NodeProvider };
    public type ChangeAutoStakeMaturity = { requested_setting_for_auto_stake_maturity : Bool };
    public type ClaimOrRefresh = { by : ?T.By };
    public type ClaimOrRefreshNeuronFromAccount = { controller : ?Principal; memo : Nat64 };
    public type ClaimOrRefreshNeuronFromAccountResponse = { result : ?T.Result1 };
    public type ClaimOrRefreshResponse = { refreshed_neuron_id : ?T.NeuronId };
    public type Command = { #Spawn : T.Spawn; #Split : T.Split; #Follow : T.Follow; #ClaimOrRefresh : T.ClaimOrRefresh; #Configure : T.Configure; #RegisterVote : T.RegisterVote; #Merge : T.Merge; #DisburseToNeuron : T.DisburseToNeuron; #MakeProposal : T.Proposal; #StakeMaturity : T.StakeMaturity; #MergeMaturity : T.MergeMaturity; #Disburse : T.Disburse };
    public type Command1 = { #Error : T.GovernanceError; #Spawn : T.SpawnResponse; #Split : T.SpawnResponse; #Follow : {  }; #ClaimOrRefresh : T.ClaimOrRefreshResponse; #Configure : {  }; #RegisterVote : {  }; #Merge : T.MergeResponse; #DisburseToNeuron : T.SpawnResponse; #MakeProposal : T.MakeProposalResponse; #StakeMaturity : T.StakeMaturityResponse; #MergeMaturity : T.MergeMaturityResponse; #Disburse : T.DisburseResponse };
    public type Command2 = { #Spawn : T.NeuronId; #Split : T.Split; #Configure : T.Configure; #Merge : T.Merge; #DisburseToNeuron : T.DisburseToNeuron; #SyncCommand : {  }; #ClaimOrRefreshNeuron : T.ClaimOrRefresh; #MergeMaturity : T.MergeMaturity; #Disburse : T.Disburse };
    public type Committed = { total_direct_contribution_icp_e8s : ?Nat64; total_neurons_fund_contribution_icp_e8s : ?Nat64; sns_governance_canister_id : ?Principal };
    public type Committed1 = { total_direct_participation_icp_e8s : ?Nat64; total_neurons_fund_participation_icp_e8s : ?Nat64; sns_governance_canister_id : ?Principal };
    public type Configure = { operation : ?T.Operation };
    public type Countries = { iso_codes : [Text] };
    public type CreateServiceNervousSystem = { url : ?Text; governance_parameters : ?T.GovernanceParameters; fallback_controller_principal_ids : [Principal]; logo : ?T.Image; name : ?Text; ledger_parameters : ?T.LedgerParameters; description : ?Text; dapp_canisters : [T.Canister]; swap_parameters : ?T.SwapParameters; initial_token_distribution : ?T.InitialTokenDistribution };
    public type Decimal = { human_readable : ?Text };
    public type DerivedProposalInformation = { swap_background_information : ?T.SwapBackgroundInformation };
    public type DeveloperDistribution = { developer_neurons : [T.NeuronDistribution] };
    public type Disburse = { to_account : ?T.AccountIdentifier; amount : ?T.Amount };
    public type DisburseResponse = { transfer_block_height : Nat64 };
    public type DisburseToNeuron = { dissolve_delay_seconds : Nat64; kyc_verified : Bool; amount_e8s : Nat64; new_controller : ?Principal; nonce : Nat64 };
    public type DissolveState = { #DissolveDelaySeconds : Nat64; #WhenDissolvedTimestampSeconds : Nat64 };
    public type Duration = { seconds : ?Nat64 };
    public type ExecuteNnsFunction = { nns_function : Int32; payload : Blob };
    public type Follow = { topic : Int32; followees : [T.NeuronId] };
    public type Followees = { followees : [T.NeuronId] };
    public type Followers = { followers : [T.NeuronId] };
    public type FollowersMap = { followers_map : [(Nat64, T.Followers)] };
    public type GetNeuronsFundAuditInfoRequest = { nns_proposal_id : ?T.NeuronId };
    public type GetNeuronsFundAuditInfoResponse = { result : ?T.Result6 };
    public type GlobalTimeOfDay = { seconds_after_utc_midnight : ?Nat64 };
    public type Governance = { default_followees : [(Int32, T.Followees)]; making_sns_proposal : ?T.MakingSnsProposal; most_recent_monthly_node_provider_rewards : ?T.MostRecentMonthlyNodeProviderRewards; maturity_modulation_last_updated_at_timestamp_seconds : ?Nat64; wait_for_quiet_threshold_seconds : Nat64; metrics : ?T.GovernanceCachedMetrics; neuron_management_voting_period_seconds : ?Nat64; node_providers : [T.NodeProvider]; cached_daily_maturity_modulation_basis_points : ?Int32; economics : ?T.NetworkEconomics; restore_aging_summary : ?T.RestoreAgingSummary; spawning_neurons : ?Bool; latest_reward_event : ?T.RewardEvent; to_claim_transfers : [T.NeuronStakeTransfer]; short_voting_period_seconds : Nat64; topic_followee_index : [(Int32, T.FollowersMap)]; migrations : ?T.Migrations; proposals : [(Nat64, T.ProposalData)]; xdr_conversion_rate : ?T.XdrConversionRate; in_flight_commands : [(Nat64, T.NeuronInFlightCommand)]; neurons : [(Nat64, T.Neuron)]; genesis_timestamp_seconds : Nat64 };
    public type GovernanceCachedMetrics = { total_maturity_e8s_equivalent : Nat64; not_dissolving_neurons_e8s_buckets : [(Nat64, float64)]; dissolving_neurons_staked_maturity_e8s_equivalent_sum : Nat64; garbage_collectable_neurons_count : Nat64; dissolving_neurons_staked_maturity_e8s_equivalent_buckets : [(Nat64, float64)]; neurons_with_invalid_stake_count : Nat64; not_dissolving_neurons_count_buckets : [(Nat64, Nat64)]; ect_neuron_count : Nat64; total_supply_icp : Nat64; neurons_with_less_than_6_months_dissolve_delay_count : Nat64; dissolved_neurons_count : Nat64; community_fund_total_maturity_e8s_equivalent : Nat64; total_staked_e8s_seed : Nat64; total_staked_maturity_e8s_equivalent_ect : Nat64; total_staked_e8s : Nat64; not_dissolving_neurons_count : Nat64; total_locked_e8s : Nat64; neurons_fund_total_active_neurons : Nat64; total_staked_maturity_e8s_equivalent : Nat64; not_dissolving_neurons_e8s_buckets_ect : [(Nat64, float64)]; total_staked_e8s_ect : Nat64; not_dissolving_neurons_staked_maturity_e8s_equivalent_sum : Nat64; dissolved_neurons_e8s : Nat64; dissolving_neurons_e8s_buckets_seed : [(Nat64, float64)]; neurons_with_less_than_6_months_dissolve_delay_e8s : Nat64; not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets : [(Nat64, float64)]; dissolving_neurons_count_buckets : [(Nat64, Nat64)]; dissolving_neurons_e8s_buckets_ect : [(Nat64, float64)]; dissolving_neurons_count : Nat64; dissolving_neurons_e8s_buckets : [(Nat64, float64)]; total_staked_maturity_e8s_equivalent_seed : Nat64; community_fund_total_staked_e8s : Nat64; not_dissolving_neurons_e8s_buckets_seed : [(Nat64, float64)]; timestamp_seconds : Nat64; seed_neuron_count : Nat64 };
    public type GovernanceError = { error_message : Text; error_type : Int32 };
    public type GovernanceParameters = { neuron_maximum_dissolve_delay_bonus : ?T.Percentage; neuron_maximum_age_for_age_bonus : ?T.Duration; neuron_maximum_dissolve_delay : ?T.Duration; neuron_minimum_dissolve_delay_to_vote : ?T.Duration; neuron_maximum_age_bonus : ?T.Percentage; neuron_minimum_stake : ?T.Tokens; proposal_wait_for_quiet_deadline_increase : ?T.Duration; proposal_initial_voting_period : ?T.Duration; proposal_rejection_fee : ?T.Tokens; voting_reward_parameters : ?T.VotingRewardParameters };
    public type IdealMatchedParticipationFunction = { serialized_representation : ?Text };
    public type Image = { base64_encoding : ?Text };
    public type IncreaseDissolveDelay = { additional_dissolve_delay_seconds : Nat32 };
    public type InitialTokenDistribution = { treasury_distribution : ?T.SwapDistribution; developer_distribution : ?T.DeveloperDistribution; swap_distribution : ?T.SwapDistribution };
    public type KnownNeuron = { id : ?T.NeuronId; known_neuron_data : ?T.KnownNeuronData };
    public type KnownNeuronData = { name : Text; description : ?Text };
    public type LedgerParameters = { transaction_fee : ?T.Tokens; token_symbol : ?Text; token_logo : ?T.Image; token_name : ?Text };
    public type ListKnownNeuronsResponse = { known_neurons : [T.KnownNeuron] };
    public type ListNeurons = { neuron_ids : [Nat64]; include_neurons_readable_by_caller : Bool };
    public type ListNeuronsResponse = { neuron_infos : [(Nat64, T.NeuronInfo)]; full_neurons : [T.Neuron] };
    public type ListNodeProvidersResponse = { node_providers : [T.NodeProvider] };
    public type ListProposalInfo = { include_reward_status : [Int32]; omit_large_fields : ?Bool; before_proposal : ?T.NeuronId; limit : Nat32; exclude_topic : [Int32]; include_all_manage_neuron_proposals : ?Bool; include_status : [Int32] };
    public type ListProposalInfoResponse = { proposal_info : [T.ProposalInfo] };
    public type MakeProposalResponse = { message : ?Text; proposal_id : ?T.NeuronId };
    public type MakingSnsProposal = { proposal : ?T.Proposal; caller : ?Principal; proposer_id : ?T.NeuronId };
    public type ManageNeuron = { id : ?T.NeuronId; command : ?T.Command; neuron_id_or_subaccount : ?T.NeuronIdOrSubaccount };
    public type ManageNeuronResponse = { command : ?T.Command1 };
    public type Merge = { source_neuron_id : ?T.NeuronId };
    public type MergeMaturity = { percentage_to_merge : Nat32 };
    public type MergeMaturityResponse = { merged_maturity_e8s : Nat64; new_stake_e8s : Nat64 };
    public type MergeResponse = { target_neuron : ?T.Neuron; source_neuron : ?T.Neuron; target_neuron_info : ?T.NeuronInfo; source_neuron_info : ?T.NeuronInfo };
    public type Migration = { status : ?Int32; failure_reason : ?Text; progress : ?T.Progress };
    public type Migrations = { neuron_indexes_migration : ?T.Migration; copy_inactive_neurons_to_stable_memory_migration : ?T.Migration };
    public type MostRecentMonthlyNodeProviderRewards = { timestamp : Nat64; rewards : [T.RewardNodeProvider] };
    public type Motion = { motion_text : Text };
    public type NetworkEconomics = { neuron_minimum_stake_e8s : Nat64; max_proposals_to_keep_per_topic : Nat32; neuron_management_fee_per_proposal_e8s : Nat64; reject_cost_e8s : Nat64; transaction_fee_e8s : Nat64; neuron_spawn_dissolve_delay_seconds : Nat64; minimum_icp_xdr_rate : Nat64; maximum_node_provider_rewards_e8s : Nat64; neurons_fund_economics : ?T.NeuronsFundEconomics };
    public type Neuron = { id : ?T.NeuronId; staked_maturity_e8s_equivalent : ?Nat64; controller : ?Principal; recent_ballots : [T.BallotInfo]; kyc_verified : Bool; neuron_type : ?Int32; not_for_profit : Bool; maturity_e8s_equivalent : Nat64; cached_neuron_stake_e8s : Nat64; created_timestamp_seconds : Nat64; auto_stake_maturity : ?Bool; aging_since_timestamp_seconds : Nat64; hot_keys : [Principal]; account : Blob; joined_community_fund_timestamp_seconds : ?Nat64; dissolve_state : ?T.DissolveState; followees : [(Int32, T.Followees)]; neuron_fees_e8s : Nat64; transfer : ?T.NeuronStakeTransfer; known_neuron_data : ?T.KnownNeuronData; spawn_at_timestamp_seconds : ?Nat64 };
    public type NeuronBasketConstructionParameters = { dissolve_delay_interval : ?T.Duration; count : ?Nat64 };
    public type NeuronBasketConstructionParameters1 = { dissolve_delay_interval_seconds : Nat64; count : Nat64 };
    public type NeuronDistribution = { controller : ?Principal; dissolve_delay : ?T.Duration; memo : ?Nat64; vesting_period : ?T.Duration; stake : ?T.Tokens };
    public type NeuronId = { id : Nat64 };
    public type NeuronIdOrSubaccount = { #Subaccount : Blob; #NeuronId : T.NeuronId };
    public type NeuronInFlightCommand = { command : ?T.Command2; timestamp : Nat64 };
    public type NeuronInfo = { dissolve_delay_seconds : Nat64; recent_ballots : [T.BallotInfo]; neuron_type : ?Int32; created_timestamp_seconds : Nat64; state : Int32; stake_e8s : Nat64; joined_community_fund_timestamp_seconds : ?Nat64; retrieved_at_timestamp_seconds : Nat64; known_neuron_data : ?T.KnownNeuronData; voting_power : Nat64; age_seconds : Nat64 };
    public type NeuronStakeTransfer = { to_subaccount : Blob; neuron_stake_e8s : Nat64; from : ?Principal; memo : Nat64; from_subaccount : Blob; transfer_timestamp : Nat64; block_height : Nat64 };
    public type NeuronsFundAuditInfo = { final_neurons_fund_participation : ?T.NeuronsFundParticipation; initial_neurons_fund_participation : ?T.NeuronsFundParticipation; neurons_fund_refunds : ?T.NeuronsFundSnapshot };
    public type NeuronsFundData = { final_neurons_fund_participation : ?T.NeuronsFundParticipation; initial_neurons_fund_participation : ?T.NeuronsFundParticipation; neurons_fund_refunds : ?T.NeuronsFundSnapshot };
    public type NeuronsFundEconomics = { maximum_icp_xdr_rate : ?T.Percentage; neurons_fund_matched_funding_curve_coefficients : ?T.NeuronsFundMatchedFundingCurveCoefficients; max_theoretical_neurons_fund_participation_amount_xdr : ?T.Decimal; minimum_icp_xdr_rate : ?T.Percentage };
    public type NeuronsFundMatchedFundingCurveCoefficients = { contribution_threshold_xdr : ?T.Decimal; one_third_participation_milestone_xdr : ?T.Decimal; full_participation_milestone_xdr : ?T.Decimal };
    public type NeuronsFundNeuron = { hotkey_principal : ?Text; is_capped : ?Bool; nns_neuron_id : ?Nat64; amount_icp_e8s : ?Nat64 };
    public type NeuronsFundNeuronPortion = { hotkey_principal : ?Principal; is_capped : ?Bool; maturity_equivalent_icp_e8s : ?Nat64; nns_neuron_id : ?T.NeuronId; amount_icp_e8s : ?Nat64 };
    public type NeuronsFundParticipation = { total_maturity_equivalent_icp_e8s : ?Nat64; intended_neurons_fund_participation_icp_e8s : ?Nat64; direct_participation_icp_e8s : ?Nat64; swap_participation_limits : ?T.SwapParticipationLimits; max_neurons_fund_swap_participation_icp_e8s : ?Nat64; neurons_fund_reserves : ?T.NeuronsFundSnapshot; ideal_matched_participation_function : ?T.IdealMatchedParticipationFunction; allocated_neurons_fund_participation_icp_e8s : ?Nat64 };
    public type NeuronsFundSnapshot = { neurons_fund_neuron_portions : [T.NeuronsFundNeuronPortion] };
    public type NodeProvider = { id : ?Principal; reward_account : ?T.AccountIdentifier };
    public type Ok = { neurons_fund_audit_info : ?T.NeuronsFundAuditInfo };
    public type Ok1 = { neurons_fund_neuron_portions : [T.NeuronsFundNeuron] };
    public type OpenSnsTokenSwap = { community_fund_investment_e8s : ?Nat64; target_swap_canister_id : ?Principal; params : ?T.Params };
    public type Operation = { #RemoveHotKey : T.RemoveHotKey; #AddHotKey : T.AddHotKey; #ChangeAutoStakeMaturity : T.ChangeAutoStakeMaturity; #StopDissolving : {  }; #StartDissolving : {  }; #IncreaseDissolveDelay : T.IncreaseDissolveDelay; #JoinCommunityFund : {  }; #LeaveCommunityFund : {  }; #SetDissolveTimestamp : T.SetDissolveTimestamp };
    public type Params = { min_participant_icp_e8s : Nat64; neuron_basket_construction_parameters : ?T.NeuronBasketConstructionParameters1; max_icp_e8s : Nat64; swap_due_timestamp_seconds : Nat64; min_participants : Nat32; sns_token_e8s : Nat64; sale_delay_seconds : ?Nat64; max_participant_icp_e8s : Nat64; min_direct_participation_icp_e8s : ?Nat64; min_icp_e8s : Nat64; max_direct_participation_icp_e8s : ?Nat64 };
    public type Percentage = { basis_points : ?Nat64 };
    public type Progress = { #LastNeuronId : T.NeuronId };
    public type Proposal = { url : Text; title : ?Text; action : ?T.Action; summary : Text };
    public type ProposalData = { id : ?T.NeuronId; failure_reason : ?T.GovernanceError; cf_participants : [T.CfParticipant]; ballots : [(Nat64, T.Ballot)]; proposal_timestamp_seconds : Nat64; reward_event_round : Nat64; failed_timestamp_seconds : Nat64; neurons_fund_data : ?T.NeuronsFundData; reject_cost_e8s : Nat64; derived_proposal_information : ?T.DerivedProposalInformation; latest_tally : ?T.Tally; sns_token_swap_lifecycle : ?Int32; decided_timestamp_seconds : Nat64; proposal : ?T.Proposal; proposer : ?T.NeuronId; wait_for_quiet_state : ?T.WaitForQuietState; executed_timestamp_seconds : Nat64; original_total_community_fund_maturity_e8s_equivalent : ?Nat64 };
    public type ProposalInfo = { id : ?T.NeuronId; status : Int32; topic : Int32; failure_reason : ?T.GovernanceError; ballots : [(Nat64, T.Ballot)]; proposal_timestamp_seconds : Nat64; reward_event_round : Nat64; deadline_timestamp_seconds : ?Nat64; failed_timestamp_seconds : Nat64; reject_cost_e8s : Nat64; derived_proposal_information : ?T.DerivedProposalInformation; latest_tally : ?T.Tally; reward_status : Int32; decided_timestamp_seconds : Nat64; proposal : ?T.Proposal; proposer : ?T.NeuronId; executed_timestamp_seconds : Nat64 };
    public type RegisterVote = { vote : Int32; proposal : ?T.NeuronId };
    public type RemoveHotKey = { hot_key_to_remove : ?Principal };
    public type RestoreAgingNeuronGroup = { count : ?Nat64; previous_total_stake_e8s : ?Nat64; current_total_stake_e8s : ?Nat64; group_type : Int32 };
    public type RestoreAgingSummary = { groups : [T.RestoreAgingNeuronGroup]; timestamp_seconds : ?Nat64 };
    public type Result = { #Ok; #Err : T.GovernanceError };
    public type Result1 = { #Error : T.GovernanceError; #NeuronId : T.NeuronId };
    public type Result10 = { #Ok : T.Ok1; #Err : T.GovernanceError };
    public type Result2 = { #Ok : T.Neuron; #Err : T.GovernanceError };
    public type Result3 = { #Ok : T.GovernanceCachedMetrics; #Err : T.GovernanceError };
    public type Result4 = { #Ok : T.RewardNodeProviders; #Err : T.GovernanceError };
    public type Result5 = { #Ok : T.NeuronInfo; #Err : T.GovernanceError };
    public type Result6 = { #Ok : T.Ok; #Err : T.GovernanceError };
    public type Result7 = { #Ok : T.NodeProvider; #Err : T.GovernanceError };
    public type Result8 = { #Committed : T.Committed; #Aborted : {  } };
    public type Result9 = { #Committed : T.Committed1; #Aborted : {  } };
    public type RewardEvent = { rounds_since_last_distribution : ?Nat64; day_after_genesis : Nat64; actual_timestamp_seconds : Nat64; total_available_e8s_equivalent : Nat64; latest_round_available_e8s_equivalent : ?Nat64; distributed_e8s_equivalent : Nat64; settled_proposals : [T.NeuronId] };
    public type RewardMode = { #RewardToNeuron : T.RewardToNeuron; #RewardToAccount : T.RewardToAccount };
    public type RewardNodeProvider = { node_provider : ?T.NodeProvider; reward_mode : ?T.RewardMode; amount_e8s : Nat64 };
    public type RewardNodeProviders = { use_registry_derived_rewards : ?Bool; rewards : [T.RewardNodeProvider] };
    public type RewardToAccount = { to_account : ?T.AccountIdentifier };
    public type RewardToNeuron = { dissolve_delay_seconds : Nat64 };
    public type SetDefaultFollowees = { default_followees : [(Int32, T.Followees)] };
    public type SetDissolveTimestamp = { dissolve_timestamp_seconds : Nat64 };
    public type SetOpenTimeWindowRequest = { open_time_window : ?T.TimeWindow };
    public type SetSnsTokenSwapOpenTimeWindow = { request : ?T.SetOpenTimeWindowRequest; swap_canister_id : ?Principal };
    public type SettleCommunityFundParticipation = { result : ?T.Result8; open_sns_token_swap_proposal_id : ?Nat64 };
    public type SettleNeuronsFundParticipationRequest = { result : ?T.Result9; nns_proposal_id : ?Nat64 };
    public type SettleNeuronsFundParticipationResponse = { result : ?T.Result10 };
    public type Spawn = { percentage_to_spawn : ?Nat32; new_controller : ?Principal; nonce : ?Nat64 };
    public type SpawnResponse = { created_neuron_id : ?T.NeuronId };
    public type Split = { amount_e8s : Nat64 };
    public type StakeMaturity = { percentage_to_stake : ?Nat32 };
    public type StakeMaturityResponse = { maturity_e8s : Nat64; staked_maturity_e8s : Nat64 };
    public type SwapBackgroundInformation = { ledger_index_canister_summary : ?T.CanisterSummary; fallback_controller_principal_ids : [Principal]; ledger_archive_canister_summaries : [T.CanisterSummary]; ledger_canister_summary : ?T.CanisterSummary; swap_canister_summary : ?T.CanisterSummary; governance_canister_summary : ?T.CanisterSummary; root_canister_summary : ?T.CanisterSummary; dapp_canister_summaries : [T.CanisterSummary] };
    public type SwapDistribution = { total : ?T.Tokens };
    public type SwapParameters = { minimum_participants : ?Nat64; neurons_fund_participation : ?Bool; duration : ?T.Duration; neuron_basket_construction_parameters : ?T.NeuronBasketConstructionParameters; confirmation_text : ?Text; maximum_participant_icp : ?T.Tokens; minimum_icp : ?T.Tokens; minimum_direct_participation_icp : ?T.Tokens; minimum_participant_icp : ?T.Tokens; start_time : ?T.GlobalTimeOfDay; maximum_direct_participation_icp : ?T.Tokens; maximum_icp : ?T.Tokens; neurons_fund_investment_icp : ?T.Tokens; restricted_countries : ?T.Countries };
    public type SwapParticipationLimits = { min_participant_icp_e8s : ?Nat64; max_participant_icp_e8s : ?Nat64; min_direct_participation_icp_e8s : ?Nat64; max_direct_participation_icp_e8s : ?Nat64 };
    public type Tally = { no : Nat64; yes : Nat64; total : Nat64; timestamp_seconds : Nat64 };
    public type TimeWindow = { start_timestamp_seconds : Nat64; end_timestamp_seconds : Nat64 };
    public type Tokens = { e8s : ?Nat64 };
    public type UpdateNodeProvider = { reward_account : ?T.AccountIdentifier };
    public type VotingRewardParameters = { reward_rate_transition_duration : ?T.Duration; initial_reward_rate : ?T.Percentage; final_reward_rate : ?T.Percentage };
    public type WaitForQuietState = { current_deadline_timestamp_seconds : Nat64 };
    public type XdrConversionRate = { xdr_permyriad_per_icp : ?Nat64; timestamp_seconds : ?Nat64 };
};
