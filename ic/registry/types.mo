// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
module T {
    public type AddApiBoundaryNodesPayload = { version : Text; node_ids : [Principal] };
    public type AddFirewallRulesPayload = { expected_hash : Text; scope : T.FirewallRulesScope; positions : [Int32]; rules : [T.FirewallRule] };
    public type AddNodeOperatorPayload = { ipv6 : ?Text; node_operator_principal_id : ?Principal; node_allowance : Nat64; rewardable_nodes : [(Text, Nat32)]; node_provider_principal_id : ?Principal; dc_id : Text };
    public type AddNodePayload = { prometheus_metrics_endpoint : Text; http_endpoint : Text; idkg_dealing_encryption_pk : ?Blob; domain : ?Text; public_ipv4_config : ?T.IPv4Config; xnet_endpoint : Text; chip_id : ?Blob; committee_signing_pk : Blob; node_signing_pk : Blob; transport_tls_cert : Blob; ni_dkg_dealing_encryption_pk : Blob; p2p_flow_endpoints : [Text] };
    public type AddNodesToSubnetPayload = { subnet_id : Principal; node_ids : [Principal] };
    public type AddOrRemoveDataCentersProposalPayload = { data_centers_to_add : [T.DataCenterRecord]; data_centers_to_remove : [Text] };
    public type BlessReplicaVersionPayload = { release_package_urls : ?[Text]; node_manager_sha256_hex : Text; release_package_url : Text; sha256_hex : Text; guest_launch_measurement_sha256_hex : ?Text; replica_version_id : Text; release_package_sha256_hex : Text; node_manager_binary_url : Text; binary_url : Text };
    public type CanisterIdRange = { end : Principal; start : Principal };
    public type ChangeSubnetMembershipPayload = { node_ids_add : [Principal]; subnet_id : Principal; node_ids_remove : [Principal] };
    public type CompleteCanisterMigrationPayload = { canister_id_ranges : [T.CanisterIdRange]; migration_trace : [Principal] };
    public type CreateSubnetPayload = { unit_delay_millis : Nat64; max_instructions_per_round : Nat64; features : T.SubnetFeatures; max_instructions_per_message : Nat64; gossip_registry_poll_period_ms : Nat32; max_ingress_bytes_per_message : Nat64; dkg_dealings_per_block : Nat64; max_block_payload_size : Nat64; max_instructions_per_install_code : Nat64; start_as_nns : Bool; is_halted : Bool; gossip_pfn_evaluation_period_ms : Nat32; max_ingress_messages_per_block : Nat64; max_number_of_canisters : Nat64; ecdsa_config : ?T.EcdsaInitialConfig; gossip_max_artifact_streams_per_peer : Nat32; replica_version_id : Text; gossip_max_duplicity : Nat32; gossip_max_chunk_wait_ms : Nat32; dkg_interval_length : Nat64; subnet_id_override : ?Principal; ssh_backup_access : [Text]; ingress_bytes_per_block_soft_cap : Nat64; initial_notary_delay_millis : Nat64; gossip_max_chunk_size : Nat32; subnet_type : T.SubnetType; ssh_readonly_access : [Text]; gossip_retransmission_request_ms : Nat32; gossip_receive_check_cache_size : Nat32; node_ids : [Principal] };
    public type DataCenterRecord = { id : Text; gps : ?T.Gps; region : Text; owner : Text };
    public type DeleteSubnetPayload = { subnet_id : ?Principal };
    public type DeployGuestosToAllSubnetNodesPayload = { subnet_id : Principal; replica_version_id : Text };
    public type DeployGuestosToAllUnassignedNodesPayload = { elected_replica_version : Text };
    public type EcdsaConfig = { quadruples_to_create_in_advance : Nat32; max_queue_size : ?Nat32; key_ids : [T.EcdsaKeyId]; signature_request_timeout_ns : ?Nat64; idkg_key_rotation_period_ms : ?Nat64 };
    public type EcdsaCurve = { #secp256k1 };
    public type EcdsaInitialConfig = { quadruples_to_create_in_advance : Nat32; max_queue_size : ?Nat32; keys : [T.EcdsaKeyRequest]; signature_request_timeout_ns : ?Nat64; idkg_key_rotation_period_ms : ?Nat64 };
    public type EcdsaKeyId = { name : Text; curve : T.EcdsaCurve };
    public type EcdsaKeyRequest = { key_id : T.EcdsaKeyId; subnet_id : ?Principal };
    public type FirewallRule = { ipv4_prefixes : [Text]; direction : ?Int32; action : Int32; user : ?Text; comment : Text; ipv6_prefixes : [Text]; ports : [Nat32] };
    public type FirewallRulesScope = { #Node : Principal; #ReplicaNodes; #ApiBoundaryNodes; #Subnet : Principal; #Global };
    public type GetSubnetForCanisterRequest = { "principal" : ?Principal };
    public type GetSubnetForCanisterResponse = { subnet_id : ?Principal };
    public type Gps = { latitude : float32; longitude : float32 };
    public type IPv4Config = { prefix_length : Nat32; gateway_ip_addr : Text; ip_addr : Text };
    public type NodeOperatorRecord = { ipv6 : ?Text; node_operator_principal_id : Blob; node_allowance : Nat64; rewardable_nodes : [(Text, Nat32)]; node_provider_principal_id : Blob; dc_id : Text };
    public type NodeProvidersMonthlyXdrRewards = { rewards : [(Text, Nat64)] };
    public type NodeRewardRate = { xdr_permyriad_per_node_per_month : Nat64; reward_coefficient_percent : ?Int32 };
    public type NodeRewardRates = { rates : [(Text, T.NodeRewardRate)] };
    public type PrepareCanisterMigrationPayload = { canister_id_ranges : [T.CanisterIdRange]; source_subnet : Principal; destination_subnet : Principal };
    public type RecoverSubnetPayload = { height : Nat64; replacement_nodes : ?[Principal]; subnet_id : Principal; registry_store_uri : ?(Text, Text, Nat64); ecdsa_config : ?T.EcdsaInitialConfig; state_hash : Blob; time_ns : Nat64 };
    public type RemoveApiBoundaryNodesPayload = { node_ids : [Principal] };
    public type RemoveFirewallRulesPayload = { expected_hash : Text; scope : T.FirewallRulesScope; positions : [Int32] };
    public type RemoveNodeDirectlyPayload = { node_id : Principal };
    public type RemoveNodeOperatorsPayload = { node_operators_to_remove : [Blob] };
    public type RemoveNodesPayload = { node_ids : [Principal] };
    public type RerouteCanisterRangesPayload = { source_subnet : Principal; reassigned_canister_ranges : [T.CanisterIdRange]; destination_subnet : Principal };
    public type Result = { #Ok : Principal; #Err : Text };
    public type Result1 = { #Ok; #Err : Text };
    public type Result2 = { #Ok : [(T.DataCenterRecord, T.NodeOperatorRecord)]; #Err : Text };
    public type Result3 = { #Ok : T.NodeProvidersMonthlyXdrRewards; #Err : Text };
    public type Result4 = { #Ok : T.GetSubnetForCanisterResponse; #Err : Text };
    public type RetireReplicaVersionPayload = { replica_version_ids : [Text] };
    public type ReviseElectedGuestosVersionsPayload = { release_package_urls : [Text]; replica_versions_to_unelect : [Text]; replica_version_to_elect : ?Text; guest_launch_measurement_sha256_hex : ?Text; release_package_sha256_hex : ?Text };
    public type SetFirewallConfigPayload = { ipv4_prefixes : [Text]; firewall_config : Text; ipv6_prefixes : [Text] };
    public type SubnetFeatures = { canister_sandboxing : Bool; http_requests : Bool; sev_enabled : ?Bool };
    public type SubnetType = { #application; #verified_application; #system };
    public type UpdateElectedHostosVersionsPayload = { release_package_urls : [Text]; hostos_version_to_elect : ?Text; hostos_versions_to_unelect : [Text]; release_package_sha256_hex : ?Text };
    public type UpdateNodeDirectlyPayload = { idkg_dealing_encryption_pk : ?Blob };
    public type UpdateNodeDomainDirectlyPayload = { node_id : Principal; domain : ?Text };
    public type UpdateNodeIPv4ConfigDirectlyPayload = { ipv4_config : ?T.IPv4Config; node_id : Principal };
    public type UpdateNodeOperatorConfigDirectlyPayload = { node_operator_id : ?Principal; node_provider_id : ?Principal };
    public type UpdateNodeOperatorConfigPayload = { node_operator_id : ?Principal; set_ipv6_to_none : ?Bool; ipv6 : ?Text; node_provider_id : ?Principal; node_allowance : ?Nat64; rewardable_nodes : [(Text, Nat32)]; dc_id : ?Text };
    public type UpdateNodeRewardsTableProposalPayload = { new_entries : [(Text, T.NodeRewardRates)] };
    public type UpdateNodesHostosVersionPayload = { hostos_version_id : ?Text; node_ids : [Principal] };
    public type UpdateSshReadOnlyAccessForAllUnassignedNodesPayload = { ssh_readonly_keys : [Text] };
    public type UpdateSubnetPayload = { unit_delay_millis : ?Nat64; max_duplicity : ?Nat32; max_instructions_per_round : ?Nat64; features : ?T.SubnetFeatures; set_gossip_config_to_default : Bool; max_instructions_per_message : ?Nat64; halt_at_cup_height : ?Bool; pfn_evaluation_period_ms : ?Nat32; subnet_id : Principal; max_ingress_bytes_per_message : ?Nat64; dkg_dealings_per_block : ?Nat64; ecdsa_key_signing_disable : ?[T.EcdsaKeyId]; max_block_payload_size : ?Nat64; max_instructions_per_install_code : ?Nat64; start_as_nns : ?Bool; is_halted : ?Bool; max_ingress_messages_per_block : ?Nat64; max_number_of_canisters : ?Nat64; ecdsa_config : ?T.EcdsaConfig; retransmission_request_ms : ?Nat32; dkg_interval_length : ?Nat64; registry_poll_period_ms : ?Nat32; max_chunk_wait_ms : ?Nat32; receive_check_cache_size : ?Nat32; ecdsa_key_signing_enable : ?[T.EcdsaKeyId]; ssh_backup_access : ?[Text]; max_chunk_size : ?Nat32; initial_notary_delay_millis : ?Nat64; max_artifact_streams_per_peer : ?Nat32; subnet_type : ?T.SubnetType; ssh_readonly_access : ?[Text] };
    public type UpdateUnassignedNodesConfigPayload = { replica_version : ?Text; ssh_readonly_access : ?[Text] };
};
