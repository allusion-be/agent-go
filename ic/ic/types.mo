// Do NOT edit this file. It was automatically generated by https://github.com/aviate-labs/agent-go.
module T {
    public type CanisterId = Principal;
    public type WasmModule = Blob;
    public type CanisterSettings = { controllers : ?[Principal]; compute_allocation : ?Nat; memory_allocation : ?Nat; freezing_threshold : ?Nat; reserved_cycles_limit : ?Nat };
    public type DefiniteCanisterSettings = { controllers : [Principal]; compute_allocation : Nat; memory_allocation : Nat; freezing_threshold : Nat; reserved_cycles_limit : Nat };
    public type ChangeOrigin = { #from_user : { user_id : Principal }; #from_canister : { canister_id : Principal; canister_version : ?Nat64 } };
    public type ChangeDetails = { #creation : { controllers : [Principal] }; #code_uninstall; #code_deployment : { mode : { #install; #reinstall; #upgrade }; module_hash : Blob }; #controllers_change : { controllers : [Principal] } };
    public type Change = { timestamp_nanos : Nat64; canister_version : Nat64; origin : T.ChangeOrigin; details : T.ChangeDetails };
    public type ChunkHash = { hash : Blob };
    public type HttpHeader = { name : Text; value : Text };
    public type HttpRequestResult = { status : Nat; headers : [T.HttpHeader]; body : Blob };
    public type EcdsaCurve = { #secp256k1 };
    public type Satoshi = Nat64;
    public type BitcoinNetwork = { #mainnet; #testnet };
    public type BitcoinAddress = Text;
    public type BlockHash = Blob;
    public type Outpoint = { txid : Blob; vout : Nat32 };
    public type Utxo = { outpoint : T.Outpoint; value : T.Satoshi; height : Nat32 };
    public type BitcoinGetUtxosArgs = { address : T.BitcoinAddress; network : T.BitcoinNetwork; filter : ?{ #min_confirmations : Nat32; #page : Blob } };
    public type BitcoinGetUtxosQueryArgs = { address : T.BitcoinAddress; network : T.BitcoinNetwork; filter : ?{ #min_confirmations : Nat32; #page : Blob } };
    public type BitcoinGetCurrentFeePercentilesArgs = { network : T.BitcoinNetwork };
    public type BitcoinGetUtxosResult = { utxos : [T.Utxo]; tip_block_hash : T.BlockHash; tip_height : Nat32; next_page : ?Blob };
    public type BitcoinGetUtxosQueryResult = { utxos : [T.Utxo]; tip_block_hash : T.BlockHash; tip_height : Nat32; next_page : ?Blob };
    public type BitcoinGetBalanceArgs = { address : T.BitcoinAddress; network : T.BitcoinNetwork; min_confirmations : ?Nat32 };
    public type BitcoinGetBalanceQueryArgs = { address : T.BitcoinAddress; network : T.BitcoinNetwork; min_confirmations : ?Nat32 };
    public type BitcoinSendTransactionArgs = { transaction : Blob; network : T.BitcoinNetwork };
    public type MillisatoshiPerByte = Nat64;
    public type NodeMetrics = { node_id : Principal; num_blocks_total : Nat64; num_block_failures_total : Nat64 };
    public type CreateCanisterArgs = { settings : ?T.CanisterSettings; sender_canister_version : ?Nat64 };
    public type CreateCanisterResult = { canister_id : T.CanisterId };
    public type UpdateSettingsArgs = { canister_id : Principal; settings : T.CanisterSettings; sender_canister_version : ?Nat64 };
    public type UploadChunkArgs = { canister_id : Principal; chunk : Blob };
    public type ClearChunkStoreArgs = { canister_id : T.CanisterId };
    public type StoredChunksArgs = { canister_id : T.CanisterId };
    public type CanisterInstallMode = { #install; #reinstall; #upgrade : ?{ skip_pre_upgrade : ?Bool; wasm_memory_persistence : ?{ #keep; #replace } } };
    public type InstallCodeArgs = { mode : T.CanisterInstallMode; canister_id : T.CanisterId; wasm_module : T.WasmModule; arg : Blob; sender_canister_version : ?Nat64 };
    public type InstallChunkedCodeArgs = { mode : T.CanisterInstallMode; target_canister : T.CanisterId; store_canister : ?T.CanisterId; chunk_hashes_list : [T.ChunkHash]; wasm_module_hash : Blob; arg : Blob; sender_canister_version : ?Nat64 };
    public type UninstallCodeArgs = { canister_id : T.CanisterId; sender_canister_version : ?Nat64 };
    public type StartCanisterArgs = { canister_id : T.CanisterId };
    public type StopCanisterArgs = { canister_id : T.CanisterId };
    public type CanisterStatusArgs = { canister_id : T.CanisterId };
    public type CanisterStatusResult = { status : { #running; #stopping; #stopped }; settings : T.DefiniteCanisterSettings; module_hash : ?Blob; memory_size : Nat; cycles : Nat; reserved_cycles : Nat; idle_cycles_burned_per_day : Nat; query_stats : { num_calls_total : Nat; num_instructions_total : Nat; request_payload_bytes_total : Nat; response_payload_bytes_total : Nat } };
    public type CanisterInfoArgs = { canister_id : T.CanisterId; num_requested_changes : ?Nat64 };
    public type CanisterInfoResult = { total_num_changes : Nat64; recent_changes : [T.Change]; module_hash : ?Blob; controllers : [Principal] };
    public type DeleteCanisterArgs = { canister_id : T.CanisterId };
    public type DepositCyclesArgs = { canister_id : T.CanisterId };
    public type HttpRequestArgs = { url : Text; max_response_bytes : ?Nat64; method : { #get; #head; #post }; headers : [T.HttpHeader]; body : ?Blob; transform : ?{ function : { /* func */ }; context : Blob } };
    public type EcdsaPublicKeyArgs = { canister_id : ?T.CanisterId; derivation_path : [Blob]; key_id : { curve : T.EcdsaCurve; name : Text } };
    public type EcdsaPublicKeyResult = { public_key : Blob; chain_code : Blob };
    public type SignWithEcdsaArgs = { message_hash : Blob; derivation_path : [Blob]; key_id : { curve : T.EcdsaCurve; name : Text } };
    public type SignWithEcdsaResult = { signature : Blob };
    public type NodeMetricsHistoryArgs = { subnet_id : Principal; start_at_timestamp_nanos : Nat64 };
    public type NodeMetricsHistoryResult = [{ timestamp_nanos : Nat64; node_metrics : [T.NodeMetrics] }];
    public type ProvisionalCreateCanisterWithCyclesArgs = { amount : ?Nat; settings : ?T.CanisterSettings; specified_id : ?T.CanisterId; sender_canister_version : ?Nat64 };
    public type ProvisionalCreateCanisterWithCyclesResult = { canister_id : T.CanisterId };
    public type ProvisionalTopUpCanisterArgs = { canister_id : T.CanisterId; amount : Nat };
    public type RawRandResult = Blob;
    public type StoredChunksResult = [T.ChunkHash];
    public type UploadChunkResult = T.ChunkHash;
    public type BitcoinGetBalanceResult = T.Satoshi;
    public type BitcoinGetBalanceQueryResult = T.Satoshi;
    public type BitcoinGetCurrentFeePercentilesResult = [T.MillisatoshiPerByte];
};
