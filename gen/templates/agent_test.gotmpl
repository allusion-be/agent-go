// Automatically generated by https://github.com/aviate-labs/agent-go.
package {{ .PackageName }}_test

import (
    "github.com/aviate-labs/agent-go"
    {{ if .UsedIDL }}"github.com/aviate-labs/agent-go/candid/idl"{{ end }}
    "github.com/aviate-labs/agent-go/mock"
    "github.com/aviate-labs/agent-go/principal"
    "net/http/httptest"
    "net/url"
    "testing"

    "{{ .ModulePath }}/{{ .PackageName }}"
)

// newAgent creates a new agent with the given (mock) methods.
// Runs a mock replica in the background.
func newAgent(methods []mock.Method) (*{{ .PackageName }}.Agent, error) {
    replica := mock.NewReplica()
    canisterId := principal.Principal{Raw: []byte("{{ .PackageName }}")}
    replica.AddCanister(canisterId, methods)
    s := httptest.NewServer(replica)
    u, _ := url.Parse(s.URL)
    a, err := {{ .PackageName }}.NewAgent(canisterId, agent.Config{
        ClientConfig: &agent.ClientConfig{Host: u},
        FetchRootKey: true,
    })
    if err != nil {
        return nil, err
    }
    return a, nil
}
{{- range .Methods }}

// Test_{{ .Name }} tests the "{{ .RawName }}" method on the "{{ $.CanisterName }}" canister.
func Test_{{ .Name }}(t *testing.T) {
    a, err := newAgent([]mock.Method{
        {
            Name:      "{{ .RawName }}",
            Arguments: []any{{ "{" }}{{ range $i, $e := .ArgumentTypes }}{{ if $i }}, {{ end }}new({{ $e.Type }}){{ end }}{{ "}" }},
            Handler:   func (request mock.Request) ([]any, error) {
                return []any{{ "{" }}{{ range $i, $e := .ReturnTypes }}{{ if $i }}, {{ end }}*new({{ $e }}){{ end }}{{ "}" }}, nil
            },
        },
    })
    if err != nil {
        t.Fatal(err)
    }
    {{ range $i, $e := .ArgumentTypes }}
    var a{{ $i }} {{ $e.Type }}
    {{- end }}
    if {{ range .ReturnTypes }}_, {{ end }}err := a.{{ .Name }}({{ range $i, $e := .ArgumentTypes }}{{ if $i }}, {{ end }}a{{ $i }}{{ end }}); err != nil {
        t.Fatal(err)
    }

}
{{- end }}
