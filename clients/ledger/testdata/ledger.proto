syntax = "proto3";

package ic_ledger.pb.v1;
option go_package = "proto/v1";

import "google/protobuf/descriptor.proto";

// The annotated message is supported by hardware wallet signing.
// The numbering was chosen as the range 19000-19999 is anyway reserved in protobuf.
extend google.protobuf.MessageOptions {
  bool tui_signed_message = 20000;
}

// The annotated field is displayed on the hardware wallet in the specification
// used by launch of the Internet Computer.
extend google.protobuf.FieldOptions {
  bool tui_signed_display_q2_2021 = 20001;
}

// A PB container for a PrincipalId, which uniquely identifies
// a principal.
message PrincipalId {
  option (tui_signed_message) = true;
  bytes serialized_id = 1 [(tui_signed_display_q2_2021) = true];
}
// Annotations related to the use of hardware wallets. The annotated messages are
// parsed on hardware wallets and marked fields are displayed in a trusted user
// interface (TUI). We must not, for instance, add fields that would change the
// semantics of the message such that old hardware wallets would not display
// appropriate information to users.

// ** LEDGER CANISTER ENDPOINTS

// Initialise the ledger canister
message LedgerInit {
  AccountIdentifier minting_account = 1;
  repeated Account initial_values = 2;
  PrincipalId archive_canister = 3;
  uint32 max_message_size_bytes = 4;
}

// The format of values serialized to/from the stable memory during and upgrade
message LedgerUpgrade {}

// Make a payment
message SendRequest {
  option (tui_signed_message) = true;
  Memo memo = 1 [(tui_signed_display_q2_2021) = true];
  Payment payment = 2 [(tui_signed_display_q2_2021) = true];
  Tokens max_fee = 3 [(tui_signed_display_q2_2021) = true];
  Subaccount from_subaccount = 4 [(tui_signed_display_q2_2021) = true];
  AccountIdentifier to = 5 [(tui_signed_display_q2_2021) = true];
  BlockIndex created_at = 6;
  TimeStamp created_at_time = 7;
}

message SendResponse {
  BlockIndex resulting_height = 1;
}

// Notify a canister that it has received a payment
message NotifyRequest {
  option (tui_signed_message) = true;
  BlockIndex block_height = 1 [(tui_signed_display_q2_2021) = true];
  Tokens max_fee = 2 [(tui_signed_display_q2_2021) = true];
  Subaccount from_subaccount = 3 [(tui_signed_display_q2_2021) = true];
  PrincipalId to_canister = 4 [(tui_signed_display_q2_2021) = true];
  Subaccount to_subaccount = 5 [(tui_signed_display_q2_2021) = true];
}

message NotifyResponse {}

message TransactionNotificationRequest {
  PrincipalId from = 1;
  Subaccount from_subaccount = 2;
  PrincipalId to = 3;
  Subaccount to_subaccount = 4;
  BlockIndex block_height = 5;
  Tokens amount = 6;
  Memo memo = 7;
}

message TransactionNotificationResponse {
  bytes response = 1;
}

message CyclesNotificationResponse {
  oneof response {
    PrincipalId created_canister_id = 1;
    Refund refund = 2;
    ToppedUp topped_up = 3;
  }
}

// Get the balance of an account
message AccountBalanceRequest {
  AccountIdentifier account = 1;
}

message AccountBalanceResponse {
  Tokens balance = 1;
}

// Get the length of the chain with a certification
message TipOfChainRequest {}

message TipOfChainResponse {
  Certification certification = 1;
  BlockIndex chain_length = 2;
}

// How many Tokens are there not in the minting account
message TotalSupplyRequest {}

message TotalSupplyResponse {
  Tokens total_supply = 1;
}

// Archive any blocks older than this
message LedgerArchiveRequest {
  TimeStamp timestamp = 1;
}

// * Shared Endpoints *

// Get a single block
message BlockRequest {
  uint64 block_height = 1;
}

message EncodedBlock {
  bytes block = 1;
}

message BlockResponse {
  oneof block_content {
    EncodedBlock block = 1;
    PrincipalId canister_id = 2;
  }
}

// Get a set of blocks
message GetBlocksRequest {
  uint64 start = 1;
  uint64 length = 2;
}

message Refund {
  BlockIndex refund = 2;
  string error = 3;
}

message ToppedUp {}

message EncodedBlocks {
  repeated EncodedBlock blocks = 1;
}

message GetBlocksResponse {
  oneof get_blocks_content {
    EncodedBlocks blocks = 1;
    string error = 2;
  }
}

// Iterate through blocks
message IterBlocksRequest {
  uint64 start = 1;
  uint64 length = 2;
}

message IterBlocksResponse {
  repeated EncodedBlock blocks = 1;
}

message ArchiveIndexEntry {
  uint64 height_from = 1;
  uint64 height_to = 2;
  PrincipalId canister_id = 3;
}

message ArchiveIndexResponse {
  repeated ArchiveIndexEntry entries = 1;
}

// ** ARCHIVE CANISTER ENDPOINTS **

// * Archive canister *
// Init the archive canister
message ArchiveInit {
  uint32 node_max_memory_size_bytes = 1;
  uint32 max_message_size_bytes = 2;
}

// Add blocks to the archive canister
message ArchiveAddRequest {
  repeated Block blocks = 1;
}

message ArchiveAddResponse {}

// Fetch a list of all of the archive nodes
message GetNodesRequest {}

message GetNodesResponse {
  repeated PrincipalId nodes = 1;
}

// ** BASIC TYPES **
message Tokens {
  option (tui_signed_message) = true;
  uint64 e8s = 1 [(tui_signed_display_q2_2021) = true];
}

message Payment {
  option (tui_signed_message) = true;
  Tokens receiver_gets = 1 [(tui_signed_display_q2_2021) = true];
}

message BlockIndex {
  option (tui_signed_message) = true;
  uint64 height = 1 [(tui_signed_display_q2_2021) = true];
}

// This is the
message Block {
  Hash parent_hash = 1;
  TimeStamp timestamp = 2;
  Transaction transaction = 3;
}

message Hash {
  bytes hash = 1;
}

message Account {
  AccountIdentifier identifier = 1;
  Tokens balance = 2;
}

message Transaction {
  oneof transfer {
    Burn burn = 1;
    Mint mint = 2;
    Send send = 3;
  }
  Memo memo = 4;
  Icrc1Memo icrc1_memo = 7;
  BlockIndex created_at = 5; // obsolete
  TimeStamp created_at_time = 6;
}

message Send {
  // The meaning of the [from] field depends on the transaction type:
  //   - Transfer: [from] is the source account.
  //   - TransferFrom: [from] is the approver.
  //   - Approve: [from] is the approver.
  AccountIdentifier from = 1;
  // The meaning of the [to] field depends on the transaction type:
  //   - Transfer: [to] is the destination account.
  //   - TransferFrom: [to] is the destination account.
  //   - Approve: [to] is the default account id of the approved principal.
  AccountIdentifier to = 2;
  // If the transaction type is Approve, the amount must be zero.
  Tokens amount = 3;
  Tokens max_fee = 4;

  // We represent metadata of new operation types as submessages for
  // backward compatibility with old clients.
  oneof extension {
    Approve approve = 5;
    TransferFrom transfer_from = 6;
  }
}

message TransferFrom {
  // The default account id of the principal who sent the transaction.
  AccountIdentifier spender = 1;
}

message Approve {
  Tokens allowance = 1;
  TimeStamp expires_at = 2;
  Tokens expected_allowance = 3;
}

message Mint {
  AccountIdentifier to = 2;
  Tokens amount = 3;
}

message Burn {
  AccountIdentifier from = 1;
  Tokens amount = 3;
  AccountIdentifier spender = 4;
}

message AccountIdentifier {
  option (tui_signed_message) = true;
  // Can contain either:
  //  * the 32 byte identifier (4 byte checksum + 28 byte hash)
  //  * the 28 byte hash
  bytes hash = 1 [(tui_signed_display_q2_2021) = true];
}

message Subaccount {
  option (tui_signed_message) = true;
  bytes sub_account = 1 [(tui_signed_display_q2_2021) = true];
}

message Memo {
  option (tui_signed_message) = true;
  uint64 memo = 1 [(tui_signed_display_q2_2021) = true];
}

message Icrc1Memo {
  option (tui_signed_message) = true;
  bytes memo = 1 [(tui_signed_display_q2_2021) = true];
}

message TimeStamp {
  uint64 timestamp_nanos = 1;
}

message Certification {
  bytes certification = 1;
}

message TransferFeeRequest {}

message TransferFeeResponse {
  Tokens transfer_fee = 1;
}
